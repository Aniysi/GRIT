import pytest
from unittest.mock import Mock, patch
from plugin.commands.QueryDatabase import QueryDatabase
from database.DBManager import DBManager

class TestQueryDatabase:
    def setup_method(self):
        # Create mock DBManager
        self.mock_manager = Mock(spec=DBManager)
        
        # Sample embeddings for testing
        self.sample_embeddings = [[0.040042922, 0.062089417, -0.1572071, 0.04440251, 0.019906215, -0.033974312, 0.004307933, 0.015924294, -0.058130987, 0.03653499, -0.031389777, 0.0023258692, 0.029765597, 0.012401441, 0.006308802, 0.009735133, 0.03522013, -0.010153851, -0.022882763, 0.044017214, 0.0064361105, 0.00747974, -0.03707871, -0.028569216, 0.12077858, -0.018120822, 0.051850762, 0.031971075, -0.043076444, -0.0008917246, 0.031492557, 0.0025673062, 0.026024548, -0.024139835, 0.05659135, -0.042605184, -0.0012028165, 0.033003595, 0.012951784, 0.031075303, -0.025869656, 0.0265899, -0.036485247, -0.035841372, 0.06169976, -0.02259531, -0.01779681, 0.004864301, 0.043722235, -0.030604882, -0.028939277, 0.057001397, 0.024208335, -0.053053226, 0.052481838, 0.055037796, -0.0062215035, -0.01614987, 0.0129097495, -0.043766662, 0.062445834, 0.03625641, -0.015036118, 0.04567274, 0.012923104, -0.052056517, -0.090099454, 0.052620944, 0.049679093, 0.015498706, -0.00012241647, 0.002862385, 0.054731477, 0.05362921, 0.023367278, -0.037360907, -0.021781823, -0.07098639, 0.024798717, 0.015592477, -0.003636493, -0.0026947707, 0.12821242, 0.018810881, 0.02420824, 0.013745142, 0.008303505, -0.029884087, -0.022293005, 0.030226385, 0.03102967, -0.0178747, 0.020267205, 0.057853304, -0.02168808, 0.010812065, -0.099383384, 0.029796308, -0.039038118, -0.05338029, -0.015622836, -0.017716937, 0.031084286, -0.008178354, 0.0304957, -0.031154994, 0.031333584, -0.0072036055, 0.0018244673, 0.0068173283, 0.006751297, 0.032597754, 0.014383322, -0.049873147, 0.0313731, 0.0021786862, -0.0120735075, -0.048112866, 0.031083591, 0.02030222, -0.03827173, -0.048024926, 0.004311333, 0.027429003, 0.00381259, -0.025555117, 0.018599648, 0.014252914, 0.03918055, -0.034968574, -0.0039781616, -0.015867658, 0.025091732, -0.008605182, -0.021280644, 0.025996178, -0.04421878, -0.038147, -0.024861699, 0.004340927, -0.015346793, -0.011191329, 0.05010716, -0.025339032, -0.053150162, -0.05179022, 0.022484835, 0.028698934, 0.00023785925, 0.005325984, -0.016592542, -0.05355588, -0.024456559, 0.0034041884, 0.052621704, -0.07034244, 0.0067341276, 0.032763842, -0.02429727, 0.05839614, -0.012609157, -0.0147170015, -0.0316421, 0.058888406, 0.014956232, -0.07280993, 0.03806898, 0.031672925, 0.047103062, 0.047122862, -0.048799343, -0.038684387, 0.019364996, -0.02210743, 0.017002098, -0.044912744, -0.038556498, -0.01587792, 0.100893304, -0.038682368, 0.031245131, -0.024844084, 0.00505623, 0.001295863, -0.027851496, 0.010645383, 0.083133, -0.010350697, -0.058345966, -0.0063661104, -0.0059337076, 0.030931236, -0.012422095, 0.0008918899, -0.024602847, 0.012181652, 0.009359601, -0.0153839495, 0.041203655, -0.016204001, -0.048595525, -0.052527677, -0.088324, 0.04754654, -0.03958973, 0.037474543, 0.017349806, 0.009499191, -0.030405572, 0.014569776, 0.016503802, 0.03693007, -0.02352556, -0.008954456, 0.033478316, -0.038190816, -0.0066276854, -0.069090575, -0.042301636, 0.026936216, 0.029378628, 0.05714211, 0.056127515, 0.017497389, 0.021734148, 0.009372098, 0.003292486, -0.0154974805, -0.0014852636, 0.012365156, -0.060527507, 6.928194e-05, 0.030006932, 0.0059742383, -0.0027297577, 0.043923803, -0.046510167, 0.036557738, 0.05678033, 0.012142358, -0.0075965477, -0.012774202, 0.03546795, -0.06283223, -0.051671542, -0.031345237, -0.033664122, -0.0022174534, -0.031740557, 0.0776676, -2.8444076e-05, -0.014435294, -0.025131257, 0.0486667, 0.00976063, -0.01492425, -0.0743142, -0.027894871, 0.024123311, -0.001536564, 0.008293828, 0.007610611, 0.014887035, 0.034436587, 0.017319499, -0.0143955825, -0.015088988, -0.038224548, -0.008491356, -0.014455154, -0.01676835, 0.07425395, 0.009232229, 0.044958416, 0.0071186936, 0.015470856, -0.013675735, -0.033339653, -0.05790417, 0.056678906, -0.0027539607, -0.012502556, -0.035904475, 0.020919563, -0.0309299, -0.021440543, 0.042777386, 0.006926064, 0.005471289, 0.011135655, 0.05602975, 0.004243378, -0.0066618333, 0.0006101063, -0.0022142155, 0.021089176, 0.0926319, 0.01737749, 0.021371266, -0.04504246, 0.061972782, 0.0024677988, 0.07120215, 0.041047275, 0.01997007, 0.0038747608, 0.076823935, -0.0334302, -0.0046206135, 0.03645595, -0.020060394, -0.01466296, 0.024383387, 0.0033657583, -0.06396533, 0.0016240187, 0.004497564, 0.008161876, 0.0015487588, -0.025542807, 0.015661662, -0.035980437, -0.018143278, -0.032305453, 0.057239376, 0.08801374, -0.016802525, 0.055658944, 0.022937732, -0.017368086, -0.04161378, 0.059880283, 0.014752319, 0.015984539, -0.050307285, -0.009390867, -0.017168595, -0.008811646, 0.020585755, 0.029527912, 0.10350284, -0.0050494233, 0.019868607, 0.0032630996, 0.031141022, -0.02610251, 0.046963334, -0.015029321, 0.02327112, -0.02325906, -0.03301449, -0.07135353, -0.057694476, 0.006152985, 0.044791453, -0.019606296, -0.03707764, 0.01773016, -0.0008397835, 0.0128591005, 0.06943446, 0.038347244, 0.017403012, -0.013132577, 0.038845517, 0.06298198, 0.013409259, 0.0018655173, 0.03759038, 0.0390713, -0.037086193, -0.012789226, 0.038740706, 0.054624572, 0.0025027858, 0.024109269, -0.08599998, -0.021921003, 0.011649247, -0.02853592, -0.03837262, -0.013168051, 0.035102233, 0.0408235, 0.04558336, -0.043680772, 0.023664227, 0.008975388, 0.009217533, -0.021300217, -0.001604387, -0.07683548, -0.052019067, -0.005584931, 0.03861072, -0.028388496, 0.004770613, 0.047582265, -0.0061632763, -0.004435014, -0.027292896, -0.0079687955, 0.0026848458, -0.03525949, -0.048564956, 0.0022953032, -0.06809714, -0.018463332, 0.05806578, -0.012727311, -0.027043156, 0.019706782, -0.0338808, 0.006343033, 0.020168131, 0.047680736, -0.012662463, 0.002256997, -0.056818556, 0.009688707, 0.03411528, 0.0020098982, -0.058700804, 0.019994572, -0.019575875, -0.026911188, 0.038401872, 0.061880887, -0.021950684, -0.01060374, 0.026823942, 0.039185587, 0.05564601, -0.03269236, 0.0016317395, -0.04014181, 0.0143769765, 0.0016230593, -0.030679205, -0.008567195, 0.021890434, -0.004533603, 0.014079152, 0.020966804, 0.028045816, 0.053428385, 0.05923222, -0.031066032, -0.008214178, -0.08488043, 0.045692056, 0.00090634945, -0.005874561, 0.06343199, 0.074284144, 0.002211363, -0.026385756, 0.021755224, -0.04528887, 0.030071, 0.036689047, 0.06747857, -0.030084863, 0.046139482, 0.0084064305, -0.043127637, 0.005370862, -0.013785547, -0.0280859, 0.029471008, 0.046366453, 0.061737914, 0.021028401, -0.018812079, -0.035008896, 0.054087833, -0.014402693, 0.044096548, -0.006540861, -0.0019921446, -0.047441617, 0.03365508, -0.041169852, -0.05074091, -0.017009288, 0.013032707, -0.00819928, -0.040804476, 0.06482947, -0.050475005, 0.053027503, -0.010751771, 0.026437901, 0.040921267, -0.0064799804, -0.015731392, 0.005091422, 0.015558188, -0.0045505785, 0.023635564, 0.02321812, 0.064374365, -0.042734206, -0.017843144, 0.0056400076, -0.07559126, 0.012940177, 0.019386394, -0.053817183, 0.027409794, -0.056986313, 0.001966864, -0.019755099, -0.048298165, -0.0061681597, -0.046182673, 0.018397447, -0.03787106, -0.021789195, -0.012377888, -0.043480165, -0.062977895, -0.011043497, -0.037335113, -0.018421944, 0.026709903, 0.029685985, -0.07962994, 0.051496323, -0.014554689, -0.014833683, -0.014556422, -0.006969995, 0.056626786, -0.028641485, -0.0012292976, -0.023605773, 0.017122796, 0.040081754, -0.009308027, 0.015653854, 0.043317392, 0.031090457, 0.049056847, 0.01005159, 0.0033576633, -0.021698851, -0.009984694, -0.0429386, -0.051500607, 0.033666424, -0.03944459, -0.006148242, -0.0070789144, -0.019951073, -0.016806284, 0.0053496547, -0.023981925, -0.014033269, 0.0081154695, 0.032681562, -0.0050637857, 0.019047366, -0.059888266, 0.021805415, -0.031756084, 0.0057485914, -0.034911923, -0.027142504, -0.0114904335, 0.006924902, -0.058411762, -0.0075025395, 0.020564247, -0.024087021, -0.027037168, 0.006535615, -0.013354276, -0.02092241, -0.032855507, 0.0006785431, -0.078800604, -0.015362761, 0.05083104, 0.0030778716, 0.006298524, -0.032012206, -0.015568532, -0.007182097, 0.01409284, -0.021597495, -0.005654332, -0.037134152, 0.018453643, -0.019135403, 0.009524946, -0.00010870663, -0.03876561, 0.006650634, 0.007935971, -0.045824654, 0.026208216, 0.08879153, -0.009467039, -0.022389963, 0.0015804139, 0.015427365, 0.0103654405, -0.017163562, -0.03154071, 0.02630588, -0.013240153, -0.018790774, -0.033143185, 0.041536868, 0.00097144477, 0.036723644, -0.004161054, -0.038477812, -0.054365315, -0.012440129, -0.028202513, 0.01413955, -0.0061965524, -0.0043637473, -0.0131914085, -0.079612285, -0.062997036, -0.009940624, -0.011630217, -0.0065785404, 0.0450473, -0.060181137, -0.06444033, -0.015322658, 0.053633645, -0.02241527, 0.015831063, -0.018391656, 0.024160761, 0.011431157, -0.018053392, 0.008514178, 0.008893409, 0.03804156, 0.011804784, -0.02861803, 0.031538248, 0.017244415, -0.0029992457, 0.07183468, 0.061011624, 0.026324032, -0.019617425, -0.016279489, 0.044228382, 0.031404555, 0.016576262, -0.053099122, -0.011292198, -0.007353812, -0.0021041988, 0.030419663, -0.006331172, 0.008812918, 0.010341423, 0.050742183, -0.030412484, -0.054256193, -0.03967562, 0.005961049, 0.0020873735, 0.044898532, -0.030190378, -0.02118672, 0.038312506, 0.04857882, -0.029997217, 0.0096146725, 0.022251748, -0.05551141, -0.034197647, 0.04121554, 0.020004092, -0.031876743, -0.051699925, 0.031022068, 0.0018376864, -0.010633112, 0.00948252, -0.036726084, -0.05647517, -0.011683719, -0.02361685, 0.0067081703, 0.03153911, -0.07212603, 0.018210176, 0.046144504, -0.005434321, 0.02518176, 0.023000086, -0.037734464, 0.02844232, -0.04833147, 0.014009575, -0.016586151, -0.0013426541, 0.035094965, -0.010573635, -0.028040035, 0.016561855, -0.042971145, -0.0074642464, -0.013842768, 0.021979658, -0.012962003, -0.061260507, 0.0018437715, 0.01805876, 0.07721323, -0.013630034, -0.0628775, -0.08415275, 0.01038765, 0.059792817, -0.034441043, -0.08002704, 0.09289572, 0.04288561, 0.019463036, -0.06731476, -0.038172815, 0.032494307, -0.011217912, 0.015532835, -0.038957365, -0.05837214, -0.008650623, -0.01448199, -0.0965829, 0.01663657, -0.015646039, 0.08167309, -0.0090606, -0.012494446, -0.02722643, -0.00042023472, 0.028285531, 0.053922676, 0.009043091, -0.035651844, 0.0022584205, 0.07741439, 0.022847004, -0.013951351, 0.013743756, 0.006387671, 0.09834214, 0.020571323, 0.012582513, -0.024869524, -0.0035835744, 0.026183985, -0.0144196255, -0.019647405, -0.020409836, -0.05430887]]
        
        # Expected response format from database query
        self.expected_response = {
            'ids': [['git commit_0', 'git log_0', 'git branch_0', 'git add_0', 'git checkout_0']],
            'embeddings': None,
            'documents': [[
                'Voglio salvare i cambiamenti che ho messo in staging creando un nuovo commit.',
                'Voglio vedere solo autore e messaggio per ogni commit, in una sola riga.',
                'Voglio vedere la lista di tutti i branch locali disponibili nel mio repository.',
                "Voglio aggiungere tutti i file modificati all'area di staging, ma non voglio includere quelli nuovi non tracciati.",
                'Voglio passare a un branch che esiste già per continuare a lavorare lì.'
            ]],
            'uris': None,
            'included': ['metadatas', 'documents', 'distances'],
            'data': None,
            'metadatas': [[{
                'keywords': 'salvare modifiche nuovo commit staging git commit',
                'command': 'git commit',
                'full_command': 'git commit'
            }, {
                'command': 'git log',
                'keywords': 'log autore messaggio lista commit oneline storico',
                'full_command': 'git log --pretty=oneline'
            }, {
                'keywords': 'vedere lista branch locali git branch',
                'command': 'git branch',
                'full_command': 'git branch'
            }, {
                'full_command': 'git add .',
                'command': 'git add',
                'keywords': 'aggiungere tutti modificati escludere non tracciati staging'
            }, {
                'keywords': 'cambiare branch passare esistente checkout spostarsi',
                'command': 'git checkout',
                'full_command': 'git checkout nome-branch'
            }]],
            'distances': [[0.6628900766372681, 0.7612106800079346, 0.8177884221076965,
                          0.857512354850769, 0.8575496673583984]]
        }
        
        # Set up mock response
        self.mock_manager.query.return_value = self.expected_response
        
        # Create QueryDatabase instance
        self.query_db = QueryDatabase(self.mock_manager, self.sample_embeddings)

    def test_successful_query(self):
        result = self.query_db.execute()
        
        # Verify DBManager.query was called with correct embeddings
        self.mock_manager.query.assert_called_once_with(self.sample_embeddings)
        
        # Verify result structure
        assert result == self.expected_response
        assert all(key in result for key in ['ids', 'documents', 'metadatas', 'distances'])
        assert len(result['ids'][0]) == 5
        assert len(result['documents'][0]) == 5
        assert len(result['metadatas'][0]) == 5
        assert len(result['distances'][0]) == 5

    def test_query_with_full_response(self):
        # Setup more comprehensive mock response
        full_response = {
            'ids': [['git commit_0', 'git log_0', 'git branch_0', 'git add_0', 'git checkout_0']],
            'documents': [[
                'Voglio salvare i cambiamenti che ho messo in staging creando un nuovo commit.',
                'Voglio vedere solo autore e messaggio per ogni commit, in una sola riga.',
                'Voglio vedere la lista di tutti i branch locali disponibili nel mio repository.',
                "Voglio aggiungere tutti i file modificati all'area di staging, ma non voglio includere quelli nuovi non tracciati.",
                'Voglio passare a un branch che esiste già per continuare a lavorare lì.'
            ]],
            'metadatas': [[
                {'keywords': 'salvare modifiche nuovo commit staging git commit', 
                 'command': 'git commit', 
                 'full_command': 'git commit'},
                {'command': 'git log', 
                 'keywords': 'log autore messaggio lista commit oneline storico', 
                 'full_command': 'git log --pretty=oneline'},
                {'keywords': 'vedere lista branch locali git branch', 
                 'command': 'git branch', 
                 'full_command': 'git branch'},
                {'full_command': 'git add .', 
                 'command': 'git add', 
                 'keywords': 'aggiungere tutti modificati escludere non tracciati staging'},
                {'keywords': 'cambiare branch passare esistente checkout spostarsi', 
                 'command': 'git checkout', 
                 'full_command': 'git checkout nome-branch'}
            ]],
            'distances': [[0.6628900766372681, 0.7612106800079346, 0.8177884221076965, 
                          0.857512354850769, 0.8575496673583984]]
        }
        
        self.mock_manager.query.return_value = full_response
        result = self.query_db.execute()
        
        # Verify the structure and content
        assert len(result['ids'][0]) == 5
        assert len(result['documents'][0]) == 5
        assert len(result['metadatas'][0]) == 5
        assert len(result['distances'][0]) == 5
        
        # Verify specific values
        assert result['ids'][0][0] == 'git commit_0'
        assert 'full_command' in result['metadatas'][0][0]
        assert isinstance(result['distances'][0][0], float)

    def test_query_response_order(self):
        # Test that results are ordered by distance
        full_response = {
            'ids': [['git commit_0', 'git log_0', 'git branch_0']],
            'documents': [['doc1', 'doc2', 'doc3']],
            'metadatas': [[
                {'command': 'git commit'},
                {'command': 'git log'},
                {'command': 'git branch'}
            ]],
            'distances': [[0.5, 0.7, 0.9]]
        }
        
        self.mock_manager.query.return_value = full_response
        result = self.query_db.execute()
        
        # Verify distances are in ascending order
        distances = result['distances'][0]
        assert all(distances[i] <= distances[i + 1] for i in range(len(distances) - 1))

    def test_invalid_manager(self):
        with pytest.raises(TypeError):
            QueryDatabase("not a manager", self.sample_embeddings)

    def test_none_embeddings(self):
        with pytest.raises(ValueError):
            QueryDatabase(self.mock_manager, None)

    def test_manager_error(self):
        self.mock_manager.query.side_effect = Exception("Database error")
        with pytest.raises(Exception) as exc_info:
            self.query_db.execute()
        assert str(exc_info.value) == "Database error"